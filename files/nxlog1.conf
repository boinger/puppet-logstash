
# http://nxlog.org/nxlog-docs/en/nxlog-reference-manual.html

# The backslash character ’\’ is used to escape the wildcard characters, unfortunately this is the same as the directory
# separator on Windows. Take this into account when specifying wildcarded ﬁlenames on this platform. Lets suppose that
# we have log ﬁles under the directory C:\test which need to be monitored. Specifying the wildcard ’C:\test\*.log’
# will not match because ’\*’ becomes a literal asterisk, thus it is treated as a non-wildcarded ﬁlename. For this reason the
# directory separator needs to be escaped, so the ’C:\test\\*.log’ will match our ﬁles. ’C:\\test\\*.log’ will
# also work. When specifying the ﬁlename using double quotes, this would became "C:\\test\\\\*.log" because
# the backslash is also used as an escape character inside double quoted string literals. Filenames on Windows systems
# are treated case-insensitively. Unix/Linux is case-sensitive.


# ROOT is the folder nxlog is installed into.
define ROOT C:\Program Files (x86)\nxlog

Moduledir %ROOT%\modules
CacheDir %ROOT%\data
Pidfile %ROOT%\data\nxlog.pid
SpoolDir %ROOT%\data
LogFile %ROOT%\data\nxlog.log

# xm_json exports to_json().
# to_json() converts the ﬁelds to JSON and returns a string.
# Fields having a leading dot (.) or underscore (_) and the ’raw_event’ will be automatically excluded.
<Extension json>
    Module xm_json
</Extension>

# what is log4net???
<Extension log4net>
    Module xm_csv
    Fields $date, $thread, $level, $logger, $message
    FieldTypes string, string, string, string, string
    Delimiter ';'
</Extension>

# Create the parse rule for IIS logs.
# You can copy these from the header of the IIS log file.
# https://www.loggly.com/docs/logging-from-windows/
# use w3cal->parse_csv();
<Extension w3cal>
    Module xm_csv
    #       date  time  cs-uri-stem  s-contentpath  sc-status  s-computername  cs(Referer) sc-bytes  cs-bytes  X-Forwarded-For  c-ip  cs(User-Agent) TimeTakenMS    s-ip  s-sitename  s-port  cs-method cs(Host)  cs(Cookie)
    Fields $date,$time,$cs-uri-stem,$s-contentpath,$sc-status,$s-computername,$cs-referer,$sc-bytes,$cs-bytes,$x-forwarded-for,$c-ip,$cs-user-agent,$time-taken-ms,$s-ip,$s-sitename,$s-port,$cs-method,$cs-host,$cs-cookie
    FieldTypes string,string,string,        string,    string,         string,     string,   string,   string,          string,string,       string,        string,string,    string, string,    string,  string,    string
    Delimiter \t
</Extension>

# im_msvistalog queries the windows eventlog (http://msdn.microsoft.com/en-us/library/aa385231.aspx)
# XXX should set a maximum number of days of backlog to upload?????
# For windows 2003 and earlier use the im_mseventlog module.
<Input windowseventlog>
    Module im_msvistalog
    PollInterval 10
    ReadFromLast TRUE
    SavePos TRUE
</Input>

<Input iisal>
    Module im_file
    PollInterval 10
    ReadFromLast TRUE
    SavePos TRUE
    File "D:\LogFiles\AdvancedLogging\Al_*.log"
    Exec if $raw_event =~ /^#/ or $Message =~ /^\s*$/ { \
             drop(); \
         } else { \
             $Hostname = hostname_fqdn(); \
             w3cal->parse_csv(); \
             $EventTime = parsedate($date + " " + $time); \
         }
</Input>

# om_file converts events to json and writes them to disk for debugging
# because this is for debugging only, the FS can decide when to sync
# the file will be truncated when it reaches 10MB
# <Output out>
#     Module om_file
#     Sync FALSE
#     CreateDir TRUE
#     file 'C:\logs\nxlog.txt'
#     Exec to_json();
# </Output>

# om_ssl initiates a tcp connection over ssl to a remote host and transfers log messages.
# The "Reconnect" directive has been deprecated as of version 2.4.
#    The module will try to reconnect automatically at increasing intervals on all errors.
# XXX can't get the timezone, so making use of:
#  parsedate() says: "Dates without timezone information are treated as local time"
#  and parsing the date for conversion to utc????
#         if defined($EventTime) { \
#           $EventTime2 = parsedate(strftime($EventTime, "YYYY-MM-DD hh:mm:ss")); \
#         } \

<Output sslout>
    Module om_ssl
    Port 9997
    Host logstash-app.icix.com
    CAFile C:\ssl\ca.crt
    CertFile C:\ssl\logstash.crt
    CertKeyFile c:\ssl\logstash.key
    AllowUntrusted TRUE
    Exec to_json();
</Output>

<Route 1>
    Path windowseventlog, iisal => sslout
</Route>

# the corresponding logstash config should be something like
# tcp {
#   port         => 9997
#   type         => "nxlog"
#   codec        => 'json'
#   ssl_enable   => true
#   ssl_cacert   => "/etc/ssl/certs/ca.crt"
#   ssl_cert     => "/etc/ssl/certs/logstash.crt"
#   ssl_key      => "/etc/ssl/certs/logstash.key"
#   data_timeout => 600
# }
